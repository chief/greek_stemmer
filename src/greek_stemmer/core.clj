(ns greek_stemmer.core)
(require '[clojure.string :as str])
(require '[clj-yaml.core  :as yaml])

(def config (yaml/parse-string (slurp
  (clojure.java.io/resource "stemmer.yml"))))
(def protected-words (:protected_words config))
(def exceptions (clojure.walk/stringify-keys (:exceptions config)))
(def steps [
  ; step 2a
  { :pattern  "^(.+?)(ΑΔΕΣ|ΑΔΩΝ)$"
    :rule     #(if (nil? (re-find #"(ΟΚ|ΜΑΜ|ΜΑΝ|ΜΠΑΜΠ|ΠΑΤΕΡ|ΓΙΑΓΙ|ΝΤΑΝΤ|ΚΥΡ|ΘΕΙ|
                                  ΠΕΘΕΡ|ΚΑΠΛΑΜ|ΠΑΡ|ΨΑΡ|ΤΖΟΥΡ|ΤΑΜΠΟΥΡ)$" %)) "ΑΔ") }
  ; step 2b
  { :pattern  "^(.+?)(ΕΔΕΣ|ΕΔΩΝ)$"
    :rule     #(if (re-find #"(ΟΠ|ΙΠ|ΕΜΠ|ΥΠ|ΓΗΠ|ΔΑΠ|ΚΡΑΣΠ|ΜΙΛ)$" %) "ΕΔ") }
  ; step 2c
  { :pattern  "^(.+?)(ΟΥΔΕΣ|ΟΥΔΩΝ)$"
    :rule     #(if (re-find #"(ΑΡΚ|ΚΑΛΙΑΚ|ΠΕΤΑΛ|ΛΙΧ|ΠΛΕΞ|ΣΚ|Σ|ΦΛ|ΦΡ|ΒΕΛ|ΛΟΥΛ|ΧΝ|ΣΠ|
                            ΤΡΑΓ|ΦΕ)$" %) "ΟΥΔ" ) }
  ; step 2d
  { :pattern  "^(.+?)(ΕΩΣ|ΕΩΝ|ΕΑΣ|ΕΑ)$"
    :rule     #(if (re-find #"^(Θ|Δ|ΕΛ|ΓΑΛ|Ν|Π|ΙΔ|ΠΑΡ|ΣΤΕΡ|ΟΡΦ|ΑΝΔΡ|ΑΝΤΡ)$" %1) "Ε") }
  ; step 3
  { :pattern  "^(.+?)(ΙΟΥΣ|ΙΑΣ|ΙΕΣ|ΙΟΣ|ΙΟΥ|ΙΟΙ|ΙΩΝ|ΙΟΝ|ΙΑ|ΙΟ)$"
    :rule     (fn [stem]
                (if (or (re-find #"[ΑΕΗΙΟΥΩ]$" stem)
                        (< (.length stem) 2)
                        (re-find #"^(ΑΓ|ΑΓΓΕΛ|ΑΓΡ|ΑΕΡ|ΑΘΛ|ΑΚΟΥΣ|ΑΞ|ΑΣ|Β|ΒΙΒΛ|ΒΥΤ|Γ|ΓΙΑΓ|
                              ΓΩΝ|Δ|ΔΑΝ|ΔΗΛ|ΔΗΜ|ΔΟΚΙΜ|ΕΛ|ΖΑΧΑΡ|ΗΛ|ΗΠ|ΙΔ|ΙΣΚ|ΙΣΤ|
                              ΙΟΝ|ΙΩΝ|ΚΙΜΩΛ|ΚΟΛΟΝ|ΚΟΡ|ΚΤΗΡ|ΚΥΡ|ΛΑΓ|ΛΟΓ|ΜΑΓ|ΜΠΑΝ|
                              ΜΠΡ|ΝΑΥΤ|ΝΟΤ|ΟΠΑΛ|ΟΞ|ΟΡ|ΟΣ|ΠΑΝΑΓ|ΠΑΤΡ|ΠΗΛ|ΠΗΝ|ΠΛΑΙΣ|
                              ΠΟΝΤ|ΡΑΔ|ΡΟΔ|ΣΚ|ΣΚΟΡΠ|ΣΟΥΝ|ΣΠΑΝ|ΣΤΑΔ|ΣΥΡ|ΤΗΛ|ΤΙΜ|
                              ΤΟΚ|ΤΟΠ|ΤΡΟΧ|ΦΙΛ|ΦΩΤ|Χ|ΧΙΛ|ΧΡΩΜ|ΧΩΡ)$" stem))
                  "Ι"
                  (if (re-find #"^(ΠΑΛ)$" stem) "ΑΙ"))) }
  ; step 4
  { :pattern  "^(.+?)(ΙΚΟΣ|ΙΚΟΝ|ΙΚΕΙΣ|ΙΚΟΙ|ΙΚΕΣ|ΙΚΟΥΣ|ΙΚΗ|ΙΚΗΣ|ΙΚΟ|ΙΚΑ|ΙΚΟΥ|ΙΚΩΝ|ΙΚΩΣ)$"
    :rule     (fn [stem]
                (if (or (re-find #"[ΑΕΗΙΟΥΩ]$" stem)
                        (re-find #"^(ΑΔ|ΑΛ|ΑΜΑΝ|ΑΜΕΡ|ΑΜΜΟΧΑΛ|ΑΝΗΘ|ΑΝΤΙΔ|ΑΠΛ|ΑΤΤ|ΑΦΡ|
                                  ΒΑΣ|ΒΡΩΜ|ΓΕΝ|ΓΕΡ|Δ|ΔΥΤ|ΕΙΔ|ΕΝΔ|ΕΞΩΔ|ΗΘ|ΘΕΤ|ΚΑΛΛΙΝ|
                                  ΚΑΛΠ|ΚΑΤΑΔ|ΚΡ|ΚΩΔ|ΛΟΓ|Μ|ΜΕΡ|ΜΟΝΑΔ|ΜΟΥΛ|ΜΟΥΣ|ΜΠΑΓΙΑΤ|
                                  ΜΠΑΝ|ΜΠΟΛ|ΜΠΟΣ|ΜΥΣΤ|Ν|ΝΙΤ|ΞΙΚ|ΟΠΤ|ΠΑΝ|ΠΕΤΣ|ΠΙΚΑΝΤ|
                                  ΠΙΤΣ|ΠΛΑΣΤ|ΠΛΙΑΤΣ|ΠΟΝΤ|ΠΟΣΤΕΛΝ|ΠΡΩΤΟΔ|ΣΕΡΤ|ΣΗΜΑΝΤ|
                                  ΣΤΑΤ|ΣΥΝΑΔ|ΣΥΝΟΜΗΛ|ΤΕΛ|ΤΕΧΝ|ΤΡΟΠ|ΤΣΑΜ|ΥΠΟΔ|Φ|ΦΙΛΟΝ|
                                  ΦΥΛΟΔ|ΦΥΣ|ΧΑΣ)$" stem)
                        (re-find #"(ΦΟΙΝ)$" stem))
                  "ΙΚ")) }
  ; step 5a
  { :pattern  "^(.+?)(ΑΓΑΜΕ|ΗΣΑΜΕ|ΟΥΣΑΜΕ|ΗΚΑΜΕ|ΗΘΗΚΑΜΕ)$" }
  { :pattern  "^(.+?)(ΑΜΕ)$"
    :rule     #(if (re-find #"^(ΑΝΑΠ|ΑΠΟΘ|ΑΠΟΚ|ΑΠΟΣΤ|ΒΟΥΒ|ΞΕΘ|ΟΥΛ|ΠΕΘ|ΠΙΚΡ|ΠΟΤ|
                            ΣΙΧ|Χ)$" %) "ΑΜ") }
  ; step 5b
  { :pattern  "(.+?)(ΑΓΑΝΕ|ΗΣΑΝΕ|ΟΥΣΑΝΕ|ΙΟΝΤΑΝΕ|ΙΟΤΑΝΕ|ΙΟΥΝΤΑΝΕ|ΟΝΤΑΝΕ|ΟΤΑΝΕ|
              ΟΥΝΤΑΝΕ|ΗΚΑΝΕ|ΗΘΗΚΑΝΕ)$"
    :rule     #(if (re-find #"^(ΤΡ|ΤΣ)$" %1) "ΑΓΑΝ") }
  { :pattern  "^(.+?)(ΑΝΕ)$"
    :rule     (fn [stem]
                (if (or (re-find #"^(ΒΕΤΕΡ|ΒΟΥΛΚ|ΒΡΑΧΜ|Γ|ΔΡΑΔΟΥΜ|Θ|ΚΑΛΠΟΥΖ|ΚΑΣΤΕΛ|
                                  ΚΟΡΜΟΡ|ΛΑΟΠΛ|ΜΩΑΜΕΘ|Μ|ΜΟΥΣΟΥΛΜ|Ν|ΟΥΛ|Π|ΠΕΛΕΚ|ΠΛ|
                                  ΠΟΛΙΣ|ΠΟΡΤΟΛ|ΣΑΡΑΚΑΤΣ|ΣΟΥΛΤ|ΤΣΑΡΛΑΤ|ΟΡΦ|ΤΣΙΓΓ|
                                  ΤΣΟΠ|ΦΩΤΟΣΤΕΦ|Χ|ΨΥΧΟΠΛ|ΑΓ|ΟΡΦ|ΓΑΛ|ΓΕΡ|ΔΕΚ|ΔΙΠΛ|
                                  ΑΜΕΡΙΚΑΝ|ΟΥΡ|ΠΙΘ|ΠΟΥΡΙΤ|Σ|ΖΩΝΤ|ΙΚ|ΚΑΣΤ|ΚΟΠ|ΛΙΧ|
                                  ΛΟΥΘΗΡ|ΜΑΙΝΤ|ΜΕΛ|ΣΙΓ|ΣΠ|ΣΤΕΓ|ΤΡΑΓ|ΤΣΑΓ|Φ|ΕΡ|
                                  ΑΔΑΠ|ΑΘΙΓΓ|ΑΜΗΧ|ΑΝΙΚ|ΑΝΟΡΓ|ΑΠΗΓ|ΑΠΙΘ|ΑΤΣΙΓΓ|ΒΑΣ|
                                  ΒΑΣΚ|ΒΑΘΥΓΑΛ|ΒΙΟΜΗΧ|ΒΡΑΧΥΚ|ΔΙΑΤ|ΔΙΑΦ|ΕΝΟΡΓ|ΘΥΣ|
                                  ΚΑΠΝΟΒΙΟΜΗΧ|ΚΑΤΑΓΑΛ|ΚΛΙΒ|ΚΟΙΛΑΡΦ|ΛΙΒ|ΜΕΓΛΟΒΙΟΜΗΧ|
                                  ΜΙΚΡΟΒΙΟΜΗΧ|ΝΤΑΒ|ΞΗΡΟΚΛΙΒ|ΟΛΙΓΟΔΑΜ|ΟΛΟΓΑΛ|ΠΕΝΤΑΡΦ|
                                  ΠΕΡΗΦ|ΠΕΡΙΤΡ|ΠΛΑΤ|ΠΟΛΥΔΑΠ|ΠΟΛΥΜΗΧ|ΣΤΕΦ|ΤΑΒ|ΤΕΤ|
                                  ΥΠΕΡΗΦ|ΥΠΟΚΟΠ|ΧΑΜΗΛΟΔΑΠ|ΨΗΛΟΤΑΒ)$" stem)
                        (re-find #"[ΑΕΗΙΟΩ]$" stem))
                  "ΑΝ")) }
  ; step 5c
  { :pattern  "^(.+?)(ΗΣΕΤΕ)$" }
  { :pattern  "^(.+?)(ΕΤΕ)$"
    :rule     (fn [stem]
                (if (or (re-find #"[ΑΕΗΙΟΩ]$" stem)
                        (re-find #"(ΟΔ|ΑΙΡ|ΦΟΡ|ΤΑΘ|ΔΙΑΘ|ΣΧ|ΕΝΔ|ΕΥΡ|ΤΙΘ|ΥΠΕΡΘ|ΡΑΘ|
                                  ΕΝΘ|ΡΟΘ|ΣΘ|ΠΥΡ|ΑΙΝ|ΣΥΝΔ|ΣΥΝ|ΣΥΝΘ|ΧΩΡ|ΠΟΝ|ΒΡ|ΚΑΘ|
                                  ΕΥΘ|ΕΚΘ|ΝΕΤ|ΡΟΝ|ΑΡΚ|ΒΑΡ|ΒΟΛ|ΩΦΕΛ)$" stem)
                        (re-find #"(ΑΒΑΡ|ΒΕΝ|ΕΝΑΡ|ΑΒΡ|ΑΔ|ΑΘ|ΑΝ|ΑΠΛ|ΒΑΡΟΝ|ΝΤΡ|ΣΚ|
                                  ΚΟΠ|ΜΠΟΡ|ΝΙΦ|ΠΑΓ|ΠΑΡΑΚΑΛ|ΣΕΡΠ|ΣΚΕΛ|ΣΥΡΦ|ΤΟΚ|Υ|Δ|
                                  ΕΜ|ΘΑΡΡ|Θ)$" stem))
                  "ΕΤ")) }
  ; step 5d
  { :pattern  "^(.+?)(ΟΝΤΑΣ|ΩΝΤΑΣ)$"
    :rule     (fn [stem]
                (if (re-find #"^ΑΡΧ" stem)
                  "ΟΝΤ"
                  (if (re-find #"ΚΡΕ$" stem) "ΩΝΤ")))
                 }
  ; step 5e
  { :pattern  "^(.+?)(ΟΜΑΣΤΕ|ΙΟΜΑΣΤΕ)$"
    :rule     #(if (re-find #"^ΟΝ$" %) "ΟΜΑΣΤ") }
  ; step 5f
  { :pattern  "^(.+?)(ΙΕΣΤΕ)$"
    :rule     #(if (re-find #"^(Π|ΑΠ|ΣΥΜΠ|ΑΣΥΜΠ|ΑΚΑΤΑΠ|ΑΜΕΤΑΜΦ)$" %) "ΙΕΣΤ") }
  { :pattern  "^(.+?)(ΕΣΤΕ)$"
    :rule     #(if (re-find #"^(ΑΛ|ΑΡ|ΕΚΤΕΛ|Ζ|Μ|Ξ|ΠΑΡΑΚΑΛ|ΑΡ|ΠΡΟ|ΝΙΣ)$" %) "ΕΣΤ") }
  ; step 5g
  { :pattern  "^(.+?)(ΗΘΗΚΑ|ΗΘΗΚΕΣ|ΗΘΗΚΕ)$" }
  { :pattern  "^(.+?)(ΗΚΑ|ΗΚΕΣ|ΗΚΕ)$"
    :rule     #(if (or (re-find #"(ΣΚΩΛ|ΣΚΟΥΛ|ΝΑΡΘ|ΣΦ|ΟΘ|ΠΙΘ)$" %)
                       (re-find #"^(ΔΙΑΘ|Θ|ΠΑΡΑΚΑΤΑΘ|ΠΡΟΣΘ|ΣΥΝΘ)$" %)) "ΗΚ") }
  ; step 5h
  { :pattern  "^(.+?)(ΟΥΣΑ|ΟΥΣΕΣ|ΟΥΣΕ)$"
    :rule     (fn [stem]
                (if (or (re-find #"^(ΦΑΡΜΑΚ|ΧΑΔ|ΑΓΚ|ΑΝΑΡΡ|ΒΡΟΜ|ΕΚΛΙΠ|ΛΑΜΠΙΔ|ΛΕΧ|Μ|ΠΑΤ|
                                 Ρ|Λ|ΜΕΔ|ΜΕΣΑΖ|ΥΠΟΤΕΙΝ|ΑΜ|ΑΙΘ|ΑΝΗΚ|ΔΕΣΠΟΖ|ΕΝΔΙΑΦΕΡ|ΔΕ|
                                 ΔΕΥΤΕΡΕΥ|ΚΑΘΑΡΕΥ|ΠΛΕ|ΤΣΑ)$" stem)
                        (re-find #"(ΠΟΔΑΡ|ΒΛΕΠ|ΠΑΝΤΑΧ|ΦΡΥΔ|ΜΑΝΤΙΛ|ΜΑΛΛ|ΚΥΜΑΤ|ΛΑΧ|
                                  ΛΗΓ|ΦΑΓ|ΟΜ|ΠΡΩΤ)$" stem)
                        (re-find #"[ΑΕΗΙΟΥΩ]$" stem))
                  "ΟΥΣ")) }
  ; step 5i
  { :pattern  "^(.+?)(ΑΓΑ|ΑΓΕΣ|ΑΓΕ)$"
    :rule     (fn [stem]
                (if (and (or (re-find #"^(ΑΒΑΣΤ|ΠΟΛΥΦ|ΑΔΗΦ|ΠΑΜΦ|Ρ|ΑΣΠ|ΑΦ|ΑΜΑΛ|ΑΜΑΛΛΙ|
                                      ΑΝΥΣΤ|ΑΠΕΡ|ΑΣΠΑΡ|ΑΧΑΡ|ΔΕΡΒΕΝ|ΔΡΟΣΟΠ|ΞΕΦ|ΝΕΟΠ|
                                      ΝΟΜΟΤ|ΟΛΟΠ|ΟΜΟΤ|ΠΡΟΣΤ|ΠΡΟΣΩΠΟΠ|ΣΥΜΠ|ΣΥΝΤ|Τ|
                                      ΥΠΟΤ|ΧΑΡ|ΑΕΙΠ|ΑΙΜΟΣΤ|ΑΝΥΠ|ΑΠΟΤ|ΑΡΤΙΠ|ΔΙΑΤ|ΕΝ|
                                      ΕΠΙΤ|ΚΡΟΚΑΛΟΠ|ΣΙΔΗΡΟΠ|Λ|ΝΑΥ|ΟΥΛΑΜ|ΟΥΡ|Π|ΤΡ|Μ)$" stem)
                              (re-find #"(ΟΦ|ΠΕΛ|ΧΟΡΤ|ΛΛ|ΣΦ|ΡΠ|ΦΡ|ΠΡ|ΛΟΧ|ΣΜΗΝ)$" stem))
                    (not (or (re-find #"^(ΨΟΦ|ΝΑΥΛΟΧ)$" stem)
                             (re-find #"(ΚΟΛΛ)$" stem))))
                  "ΑΓ")) }
  ; step 5j
  { :pattern  "^(.+?)(ΗΣΕ|ΗΣΟΥ|ΗΣΑ)$"
    :rule     #(if (re-find #"^(Ν|ΧΕΡΣΟΝ|ΔΩΔΕΚΑΝ|ΕΡΗΜΟΝ|ΜΕΓΑΛΟΝ|ΕΠΤΑΝ|Ι)$" %) "ΗΣ") }
  ; step 5k
  { :pattern  "^(.+?)(ΗΣΤΕ)$"
    :rule     #(if (re-find #"^(ΑΣΒ|ΣΒ|ΑΧΡ|ΧΡ|ΑΠΛ|ΑΕΙΜΝ|ΔΥΣΧΡ|ΕΥΧΡ|ΚΟΙΝΟΧΡ|ΠΑΛΙΜΨ)$" %) "ΗΣΤ") }
  ; step 5l
  { :pattern  "^(.+?)(ΟΥΝΕ|ΗΣΟΥΝΕ|ΗΘΟΥΝΕ)$"
    :rule     #(if (re-find #"^(Ν|Ρ|ΣΠΙ|ΣΤΡΑΒΟΜΟΥΤΣ|ΚΑΚΟΜΟΥΤΣ|ΕΞΩΝ)$" %) "ΟΥΝ") }
  ; step 5m
  { :pattern  "^(.+?)(ΟΥΜΕ|ΗΣΟΥΜΕ|ΗΘΟΥΜΕ)$"
    :rule     #(if (re-find #"^(ΠΑΡΑΣΟΥΣ|Φ|Χ|ΩΡΙΟΠΛ|ΑΖ|ΑΛΛΟΣΟΥΣ|ΑΣΟΥΣ)$" %) "ΟΥΜ") }
  ; step 6a
  { :pattern  "^(.+?)(ΜΑΤΟΙ|ΜΑΤΟΥΣ|ΜΑΤΟ|ΜΑΤΑ|ΜΑΤΩΣ|ΜΑΤΩΝ|ΜΑΤΟΣ|ΜΑΤΕΣ|ΜΑΤΗ|ΜΑΤΗΣ|ΜΑΤΟΥ)$"
    :rule     #(cond
                (re-find #"^(ΓΡΑΜ)$"  %) "Α"
                (re-find #"^(ΓΕ|ΣΤΑ)" %) "ΑΤ"
                :else "Μ") }
  ])

(defn- stem_exceptions
  [word]
  (let [pattern (re-pattern (str "(.*)" "(" (str/join "|" (keys exceptions)) ")"))
        match   (re-find pattern (str word))]
    (if (empty? match)
      word
      (str (nth match 1) (exceptions (last match))))))

(defn- mark-stem
  ([word step]
    (mark-stem word (:pattern step) (:rule step)))
  ([word pattern rule]
   (let [pattern (re-pattern (str pattern))
         match   (re-find pattern (str word))]
    (if (empty? match)
      word
      (let [stem (nth match 1)]
        (if (not (nil? rule))
          (let [e (rule stem)]
            (str stem e))
          stem))))))

(defn- step-7
  [word]
  (let [match (re-find #"^(.+?)(ΕΣΤΕΡ|ΕΣΤΑΤ|ΟΤΕΡ|ΟΤΑΤ|ΥΤΕΡ|ΥΤΑΤ|ΩΤΕΡ|ΩΤΑΤ)$" word)
        stem  (nth match 1)]
    (if (not (nil? match))
      (cond
        (nil? (re-find #"^(ΕΞ|ΕΣ|ΑΝ|ΚΑΤ|Κ|ΠΡ)$" stem)) stem
        (re-find #"^(ΚΑ|Μ|ΕΛΕ|ΛΕ|ΔΕ)$" stem) (str stem "ΥΤ"))
      word)))

(defn- step-6b
  [word stem]
    (if (= (.length word) (.length stem))
      (let [match (re-find #"^(.+?)(Α|ΑΓΑΤΕ|ΑΓΑΝ|ΑΕΙ|ΑΜΑΙ|ΑΝ|ΑΣ|ΑΣΑΙ|ΑΤΑΙ|ΑΩ|Ε|ΕΙ|
                            ΕΙΣ|ΕΙΤΕ|ΕΣΑΙ|ΕΣ|ΕΤΑΙ|Ι|ΙΕΜΑΙ|ΙΕΜΑΣΤΕ|ΙΕΤΑΙ|ΙΕΣΑΙ|
                            ΙΕΣΑΣΤΕ|ΙΟΜΑΣΤΑΝ|ΙΟΜΟΥΝ|ΙΟΜΟΥΝΑ|ΙΟΝΤΑΝ|ΙΟΝΤΟΥΣΑΝ|
                            ΙΟΣΑΣΤΑΝ|ΙΟΣΑΣΤΕ|ΙΟΣΟΥΝ|ΙΟΣΟΥΝΑ|ΙΟΤΑΝ|ΙΟΥΜΑ|ΙΟΥΜΑΣΤΕ|
                            ΙΟΥΝΤΑΙ|ΙΟΥΝΤΑΝ|Η|ΗΔΕΣ|ΗΔΩΝ|ΗΘΕΙ|ΗΘΕΙΣ|ΗΘΕΙΤΕ|ΗΘΗΚΑΤΕ|
                            ΗΘΗΚΑΝ|ΗΘΟΥΝ|ΗΘΩ|ΗΚΑΤΕ|ΗΚΑΝ|ΗΣ|ΗΣΑΝ|ΗΣΑΤΕ|ΗΣΕΙ|ΗΣΕΣ|
                            ΗΣΟΥΝ|ΗΣΩ|Ο|ΟΙ|ΟΜΑΙ|ΟΜΑΣΤΑΝ|ΟΜΟΥΝ|ΟΜΟΥΝΑ|ΟΝΤΑΙ|ΟΝΤΑΝ|
                            ΟΝΤΟΥΣΑΝ|ΟΣ|ΟΣΑΣΤΑΝ|ΟΣΑΣΤΕ|ΟΣΟΥΝ|ΟΣΟΥΝΑ|ΟΤΑΝ|ΟΥ|ΟΥΜΑΙ|
                            ΟΥΜΑΣΤΕ|ΟΥΝ|ΟΥΝΤΑΙ|ΟΥΝΤΑΝ|ΟΥΣ|ΟΥΣΑΝ|ΟΥΣΑΤΕ|Υ|ΥΣ|Ω|ΩΝ|
                            ΟΙΣ)$" stem)]
        (if match (nth match 1) word))
      stem))

(defn- process
  [word steps initial-stem]
  (loop [s steps stem (stem_exceptions word)]
    (if (empty? s)
      stem
      (recur (rest s) (mark-stem stem (first s))))))

(defn- should-stem?
  [word]
  (and (> (.length word) 3)
       (re-find #"^[ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ]+$" word))
       (= (.indexOf protected-words word) -1))

(defn- phase-a
  [word]
  (process word steps (stem_exceptions word)))

(defn stem
  [word]
  (if (should-stem? word)
    (step-7 (step-6b word (phase-a word)))
    word))

