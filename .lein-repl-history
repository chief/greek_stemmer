(use 'midje.repl)
(doc midje)
(autotest)
(doc just)
(pst *me)
(def a { a: 1 })
(def tra { a: 1 })
(def tra { :a 1 })
step_1_exceptions
greek_stemmerstep_1_exceptions
greek_stemmer.step_1_exceptions
greek_stemmerstep_1_exceptions
greek_stemmer/step_1_exceptions
(use 'greek_stemmer.core)
step_1_exceptions
(keys step_1_exceptions)
(values step_1_exceptions)
(val step_1_exceptions)
(vals step_1_exceptions)
(keys step_1_exceptions)
(require 'clojure.string :as str)
(require '[clojure.string :as str])
(keys step_1_exceptions)
(str/join (keys step_1_exceptions) "|")
(str(keys step_1_exceptions) "|")
(doc str/join)
(str/join "|" (keys step_1_exceptions))
(doc re-find)
(doc re-replace)
(doc re-repl)
(doc replace)
(doc str/replace)
(str/replace "ΚΡΕΑΣ" #"(.*)((str/join "|" (keys step_1_exceptions))
(str/replace "ΚΡΕΑΣ" #"(.*)((str/join '|' (keys step_1_exceptions))" "τε")
(str/replace "ΚΡΕΑΣ" #"(.*)((str/join '|' (keys step_1_exceptions)))" "τε")
(str/replace "ΚΡΕΑΣ" #"(.*)((str/join '|' (keys step_1_exceptions)))" τε)
(str/replace "ΚΡΕΑΣ" #"(.*)((str/join '|' (keys step_1_exceptions)))" 'τε')
(str/replace "ΚΡΕΑΣ" #"" 'τε')
(str/replace "ΚΡΕΑΣ" #"ΚΡΕΑΣ" 'τε')
(str/replace "ΚΡΕΑΣ" #"ΚΡΕΑΣ" "τε")
(str/replace "ΚΡΕΑΣ" #"ΚΡΕΑ" "τε")
(str/replace "ΚΡΕΑΣ" #"ΚΡΕΑ" "")
(str/replace "ΚΡΕΑΣ" #"ΚΡΕΑΣ" "ΚΡΕ")
(str/replace "ΚΡΕΑΣ" #"(.*)ΚΡΕΑΣ" "ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)ΚΡΕΑΣ" "ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)ΚΡΕΑΣ" "#1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)ΚΡΕΑΣ" str(#1 "ΚΡΕ"))
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)ΚΡΕΑΣ" "#$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(ΚΡΕΑΣ)" "#$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(ΚΡΕΑΣ)" "$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join '|' (keys step_1_exceptions))" "$1ΚΡΕ")
(keys step_1_exceptions)
(str/join '|' (keys step_1_exceptions))
(str/join "|" (keys step_1_exceptions))
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join "|" (keys step_1_exceptions))" "$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join \"|\" (keys step_1_exceptions))" "$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join | (keys step_1_exceptions))" "$1ΚΡΕ")
str/join | (keys step_1_exceptions
(str/join | (keys step_1_exceptions)
(str/join '| (keys step_1_exceptions)
(str/join '|' (keys step_1_exceptions)
(str/join '|' (keys step_1_exceptions))
(str/join '| (keys step_1_exceptions))
(str/join | (keys step_1_exceptions))
(str/join '| (keys step_1_exceptions))
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join '| (keys step_1_exceptions))" "$1ΚΡΕ")
#"(.*)(str/join '| (keys step_1_exceptions))"
(str (.*)(str/join '| (keys step_1_exceptions))
)
(str/join '| (keys step_1_exceptions))
(def a "trt")
"{a}"
"#a"
(str/join '| (keys step_1_exceptions))
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)(str/join '| (keys step_1_exceptions))" "$1ΚΡΕ")
(str/replace "ΠΑΝΚΡΕΑΣ" #"(.*)((str/join '| (keys step_1_exceptions)))" "$1ΚΡΕ")
(use 'midje.repl)
(autotest)
(use 'greek_stemmer.core)
steps
(map steps)
(reduce steps )
(reduce #(mark_stem %1) steps )
(reduce #(mark-stem %1) steps )
(reduce #(mark-stem %1 %2) steps )
(use 'greek_stemmer.core)
(reduce #(mark-stem %1 %2) steps )
(reduce #(mark-stem %1) steps )
(reduce #(mark-stem "ΔΕΔ" %1) steps )
(reduce #(mark-stem "ΔΕΔ" (:regex %1)) steps )
(reduce #(mark-stem "ΔΕΔ" (:regex %1)) steps)
(reduce #(mark-stem "ΓΙΑΓΙΑΔΕΣ" (:regex %1)) steps)
steps
(reduce #(println (:regex %1)) steps)
(reduce #(mark-stem "ΓΙΑΓΙΑΔΕΣ" (:regex %)) steps)
(def tst (reduce #(mark-stem "ΓΙΑΓΙΑΔΕΣ" (:regex %)) steps))
tt
tst
(def word "ΓΙΑΓΙΑΔΩΝ")
(def tst (reduce #(mark-stem word (:regex %)) steps))
tst
(def tst (reduce #(:regex %1) steps))
tst
(def tst (reduce #(%1 :regex) steps))
rst
tst
(def tst (reduce #(count %) steps))
tst
(class steps)
(map #(count %) steps)
(first steps)
(count (first steps))
(class (first steps))
(:regex (first steps))
(def tst (reduce #(fx [step] (println :regex step)) steps))
(def tst (reduce #(fn [step] (println :regex step)) steps))
tst
(doc reduce)
(reduce #(fn [step] (println :regex step)) steps))
(reduce #(fn [step] (println :regex step)) steps)
(reduce #(fn [step] (println :regex step)) "word" steps)
(reduce #(+ %1) "word" steps)
(reduce #(+ %1) steps)
(reduce "1" #(+ %1) steps)
(reduce 1 #(+ %1) steps)
(reduce "w" # %1) steps)
(reduce "w" #(%1) steps)
(reduce #(str (:regex %)) steps)
(reduce #(str "" (:regex %)) steps)
(reduce #(str (:regex %)) steps)
(use 'greek_stemmer.core)
(stem-v2 "ΓΙΑΓΙΑΔΕΣ")
(use 'greek_stemmer.core)
(stem-v2 "ΓΙΑΓΙΑΔΕΣ")
(def tst steps)
(use 'greek_stemmer.core)
(def tst steps)
tst
(rest tst)
(empty? (rest tst))
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΓΙΑΓΙΑΔΕΣ")
(def a [1 2 3])
a
(rest a)
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΓΙΑΓΙΑΔΕΣ")
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΓΙΑΓΙΑΔΕΣ")
a
(pop a)
a
(pop a)
(use 'midje.core)
(use 'midje.repl)
(autotest)
quit
(use 'midje.repl)
(autotest)
(pst *me)
(autotest)
(use
(use 'greek_stemmer.core)
(stem-v2 "ΓΙΑΓΙΑΔΩΝ")
(use 'greek_stemmer :reload-all)
quit
(use 'greek_stemmer :reload-all)
(use 'greek_stemmer.core :reload-all)
(stem-v2 "test")
(stem-v2 "ΓΙΑΓΙΑΔΩΝ")
(def s (first steps))
s
(mark-stem "ΓΙΑΓΙΑΔΩΝ" s)
(use 'greek_stemmer.core :reload-all)
(mark-stem "ΓΙΑΓΙΑΔΩΝ" s)
(use 'greek_stemmer.core :reload-all)
(mark-stem "ΓΙΑΓΙΑΔΩΝ" s)
(def fst (:func s))
fst
(fst "ΓΙΑΓΙΑΔΩΝ")
(fst "ΓΙΑΓΙΑΔΝ")
(fst "ΓΙΑΓΙΑΔ")
(fst "ΓΙΑΓΙΑ")
(fst "ΓΙΑΓ")
(fst "ΓΙ")
(fst "")
(fst "ΜΑΜ")
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΚΑΦΕΔΩΝ")
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΚΑΦΕΔΩΝ")
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΚΑΦΕΔΩΝ")
(use 'greek_stemmer.core :reload-all)
(stem-v2 "ΚΑΦΕΔΩΝ")
(use 'greek_stemmer.core :reload-all)
(use 'midje.repl)
(autotest)
quit
(use 'midje.repl)
(autotest)
(use 'greek_stemmer.core :reload-all)
(stem "ΔΙΑΘΗΚΕ")
(stem "ΔΙΑΘΗΚΕΣ")
(stem "ΔΙΑΘΗΚΗ")
quit
(use 'midje.repl)
(autotest)
(use 'midje.repl)
(autotest)
(def tst (re-find #"te" "aste"))
tst
(def tst (re-find #"te" "astea"))
tst
(def tst (re-find #"(te)" "astea"))
tst
(def tst (re-find #"(te)" "asta"))
tst
(last-step "test")
(use 'greek_stemmer.core)
(last-step "test")
(last-step)
(stem "towr")
(stem "ΔΙΑΒΑΣΜΑ")
(stem "ΔΙΑΒΑΣΤΕΡΟΣ")
(stem "ΠΛΗΣΙΕΣΤΕΡΟΣ")
(last-step "te"))
(last-step "te")
(stem "ΠΛΗΣΙΕΣΤΕΡΟΣ")
(last-step "te")
(def tst nil)
tst
(nth tst 1
)
(last-step "test")
(last-stem "ΠΛΗΣΙΕΣΤΑΤΟΣ")
(last-step "ΠΛΗΣΙΕΣΤΑΤΟΣ")
(read-string (slurp "protected_word.txt"))
(read-string (slurp ./"protected_word.txt"))
(read-string (slurp "protected_word.yml"))
(read-string (slurp "./protected_word.yml"))
(read-string (slurp "./protected_words.yml"))
(read-string (slurp "protected_words.yml"))
quit
(parse-string (slurp "protected_words.yml"))
(read-string (slurp "protected_words.yml"))
(read-string (slurp "./protected_words.yml"))
(doc slurp)
(doc clojure.java.io/reader)
(read-string (slurp "protected_words.yml"))
(doc slurp)
(slurp "protected_words.yml")
(spit "test.txt" "test")
(slurp "config/protected_words.yml")
(slurp "config/stemmer.yml")
(def tst (slurp "config/stemmer.yml"))
(calss tst)
(class tst)
quit
(use 'midje.repl)
(use 'greek_stemmer.core)
(require '[clj-yaml.core :as yaml])
(yaml/parse-string (slurp "config/stemmer.yml"))
(autotest)
(use 'greek_stemmer.core)
(protected-words)
protected-words
(exceptions)
exceptions
(doc stringify)
(find-doc stringify)
(find stringify)
(find-doc "stringify")
(doc stringify)
(stem "ΑΚΡΙΒΩΣ")
(stem "ΑΝΤΙΠΕΡΑ")
quit
(use 'midje.repl)
(autotest)
(use 'midje.repl)
quit
(use 'greek_stemmer.core)
(use 'criterium.core)
(bench (stem "ΤΕΣΤ"))
(time (stem "ΤΕΣΤ"))
(dotimes
[100] 
(stem "ΤΕΣΤ"))
(dotimes
[_ 100]
(stem "100"))
(time (dotimes [_ 100] (stem "100")))
(time (dotimes [_ 10000] (stem "100")))
(time (dotimes [_ 100000] (stem "100")))
(time (dotimes [_ 10000] (stem "100")))
(time (dotimes [_ 100000] (stem "100")))
quit
(use 'greek_stemmer.core)
(stem "ΣΠΥΡΟΣ")
(stem "ΓΙΑΓΙΑΔΩΝ")
quit
(use 'greek_stemmer.core)
(greek_stemmer.core/stem "ΠΑΠΟΥΤΣΙΑ")
quit
